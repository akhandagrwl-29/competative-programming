const int N = 1e3;
int vertex, edges;
int graph[N][N];
int dp[N][N];
int visit;
int ans;
int tsp(int mask, int pos)
{
	if (mask == visit) {
		return graph[pos][0];
	}
	if (dp[mask][pos] != -1) {

		return dp[mask][pos];
	}

	int ans = INT_MAX;
	for (int city = 0; city < vertex; city++) {

		if ((mask & (1 << city)) == 0) {

			int newAns = graph[pos][city] + tsp( mask | (1 << city), city);
			ans = min(ans, newAns);
		}

	}
	return dp[mask][pos] = ans;
}
void solve ()
{
	memset(dp, -1, sizeof(dp));
	cin >> vertex >> edges;
	for (int i = 0; i <= vertex; i++) {

		for (int j = 0; j <= vertex; j++) {

			if (i == j)
				graph[i][j] = 0;
			else
				graph[i][j] = inf;
		}
	}
	for (int i = 0; i < edges; i++) {

		int x, y, w;
		cin >> x >> y >> w;
		x--;
		y--;
		graph[x][y] = w;
		graph[y][x] = w;

	}
	visit = (1 << vertex) - 1;
	cout << tsp(1, 0);

}
