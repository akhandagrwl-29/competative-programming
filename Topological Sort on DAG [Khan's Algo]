// Tropological Sort helps in resolving dependecies in graph
// It works on Directed Acyclic Graph
const int N = 1e5;
int vertex, edges;
vector<int> v[N];
// Vector containing elements after tropological sort
vector<int> tropo;
int degree[N];
void toposort()
{
    priority_queue<int, vector<int>, greater<int> > q;
    for (int i = 1; i <= vertex; i++) {
        for (auto cur : v[i]) {
            // cout << cur << endl;
            degree[cur]++;
        }
    }
    for (int i = 1; i <= vertex; i++) {
        if (!degree[i])
            q.push(i);
    }
    while (!q.empty())
    {
        int node = q.top();
        tropo.pb(node);
        q.pop();
        for (auto i : v[node]) {
            degree[i]--;
            if (degree[i] == 0)
                q.push(i);
        }
    }

}
