// 1-Use Dfs to get an ordering based upon finish time
// 2-Reverse the Graph
// 3-Do dfs on reverse graph from right to left in ordering list
const int N = 1e5;
int vertex, edges;
vector<int>graph[N];
vector<int>rev_graph[N];
bool vis[N];
vector<int> order;
void dfs1(int node)
{
	vis[node] = 1;
	for (auto cur : graph[node]) {

		if (!vis[cur]) {
			dfs1(cur);
		}
	}
	order.pb(node);
	return;
}
void dfs2(int node)
{
	vis[node] = 1;
	cout << node << " ";
	for (auto cur : rev_graph[node]) {

		if (!vis[cur]) {
			dfs2(cur);
		}
	}
	return;
}
void solve ()
{
	memset(vis, 0, sizeof(vis));
	cin >> vertex >> edges;
	for (int i = 0; i < edges; i++) {
		int x, y;
		cin >> x >> y;
		graph[x].pb(y);
		rev_graph[y].pb(x);
	}
	for (int i = 0; i < vertex; i++) {

		if (!vis[i]) {
			dfs1(i);
		}
	}
	reverse(all(order));
	memset(vis, 0, sizeof(vis));
	char ch = 'A';
	for (auto i : order) {

		int node = i;
		if (!vis[node]) {

			cout << "Component " << ch << "--->";
			dfs2(node);
			ch++;
			cout << endl;
		}
	}
}
