//Distance stores levels
//ways stores the number of ways to get from kth vertex to any other vertex with the shortest path taken
const int N = 1e5 + 5;
vector<int> v[N];
bool visited[N];
int dis[N];
int ways[N];
void bfs(int n)
{
    queue<int> q;
    q.push(n);
    visited[n] = 1;
    dis[n] = 0;
    ways[n] = 1;
    while (!q.empty())
    {
        int node = q.front();
        q.pop();
        for (auto i : v[node])
        {
            if (visited[i] == 0)
            {
                visited[i] = 1;
                q.push(i);
                dis[i] = dis[node] + 1;
                ways[i] += ways[node];
            }
            else
            {
                if (dis[node] + 1 == dis[i])
                {
                    ways[i] += ways[node];
                }
            }
        }
    }
}
