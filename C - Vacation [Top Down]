const int N = 1e5 + 3;
int dp[N][4];
int cal(int num, int A[][4], int ind) {

	if (num == 1) {
		dp[num][ind] = A[num][ind];
		return dp[num][ind];
	}
	if (dp[num][ind] != -1)
		return dp[num][ind];

	if (ind == 1) {
		dp[num][ind] = A[num][ind] + max(cal(num - 1, A, 2), cal(num - 1, A, 3));
	}
	if (ind == 2) {
		dp[num][ind] = A[num][ind] + max(cal(num - 1, A, 1), cal(num - 1, A, 3));
	}
	if (ind == 3) {
		dp[num][ind] = A[num][ind] + max(cal(num - 1, A, 1), cal(num - 1, A, 2));
	}
	return dp[num][ind];
}
void solve ()
{
	int num;
	cin >> num;
	int A[num + 1][4];
	for (int i = 1; i <= num; i++) {

		for (int j = 1; j <= 3; j++) {

			cin >> A[i][j];
		}
	}
	memset(dp, -1, sizeof(dp));
	int ans = INT_MIN;
	for (int i = 1; i <= 3; i++) {

		ans = max(ans, cal(num, A, i));
	}
	cout << ans;
}
