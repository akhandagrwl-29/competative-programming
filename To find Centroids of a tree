vector<vector<int> > v;
vector<int> Centroid(const vector<vector<int>> &g) {
	int n = g.size();
	vector<int> centroid;
	vector<int> sz(n);
	function<void (int, int)> dfs = [&](int u, int prev) {
		sz[u] = 1;
		bool is_centroid = true;
		for (auto v : g[u]) if (v != prev) {
				dfs(v, u);
				sz[u] += sz[v];
				if (sz[v] > n / 2) is_centroid = false;
			}
		if (n - sz[u] > n / 2) is_centroid = false;
		if (is_centroid) centroid.push_back(u);
	};
	dfs(0, -1);
	return centroid;
}
void solve()
{
	int num;
	read(num);
	v = vector<vector<int> > (num);
	for (int i = 0; i < num - 1; i++) {

		int x, y;
		read(x, y);
		x--;
		y--;
		v[x].pb(y);
		v[y].pb(x);
	}
	vector<int> node = Centroid(v);
	for (auto i : node)
		cout << i << " ";
}
