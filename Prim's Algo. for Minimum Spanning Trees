// Active Edge->  Veretx between MST Vertex and Non MST Vertex
// MST Edge -> Edge between two MST vertex
// MST Vertex -> A verte part of MST
// Step 1-Choose a source Vertex;
// Step 2-Out of all active edges choose the one with smallest weight

const int N = 1e5 + 5;

int vertex, edges, source, destination;
vector<pair<int, int>> v[N];
bool visited[N];
int parent[N];

void primsMST()
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
    // For storing minimum spanning tree
    int cost = 0;
    pq.push(mp(0, source));
    while (!pq.empty())
    {
        pair<int, int> best = pq.top();
        pq.pop();
        int weight = best.ff;
        int node = best.ss;
        // If edge is already included in the MST
        if (visited[node])
            continue;

        cost += weight;
        visited[node] = 1;

        for (auto cur : v[node])
        {
            if (!visited[cur.ff]) {
                pq.push(mp(cur.ss, cur.ff));
                parent[cur.ff] = node;
            }
        }
    }
    cout << cost;
}
void solve()
{
    cin >> vertex >> edges;
    for (int i = 0; i < edges; i++)
    {
        int x, y, w;
        cin >> x >> y >> w;
        v[x].pb(y, w);
        v[y].pb(x, w);
    }
    source = 1;
    destination = vertex;
    primsMST();
}
